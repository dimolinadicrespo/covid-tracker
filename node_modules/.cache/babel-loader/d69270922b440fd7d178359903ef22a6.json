{"ast":null,"code":"var _jsxFileName = \"/Users/molia/projects/js/react/covid19/src/App.js\";\nimport React, { Fragment, useEffect, useState } from 'react';\nimport Header from './components/Header.js';\nimport Card from './components/Card.js';\nimport Select from './components/Select.js';\nimport styled from '@emotion/styled';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport { fetchGlobalData, fetchCountryData, fetchCountryDataTimeLine } from './api';\nimport { isEmoji } from './helpers/helpers.js';\nimport { Line } from 'react-chartjs-2';\nconst Container = styled.div`\n    margin: auto;\n    width: 95%;    \n`;\nconst CardWrapper = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n`;\nconst ChartWrapper = styled.div`\n    width: 50%;\n    margin: 25px auto auto;\n`;\n\nfunction App() {\n  const [country, setCountry] = useState({\n    code: 'ðŸŒŽ',\n    label: 'Global'\n  });\n  const [loading, setLoading] = useState(true);\n  const [state, setstate] = useState({\n    active: 0,\n    cases: 0,\n    deaths: 0,\n    recovered: 0\n  });\n  const {\n    active,\n    cases,\n    deaths,\n    recovered\n  } = state;\n\n  const getGlobalData = async () => {\n    let response = await fetchGlobalData();\n    setLoading(false);\n    setstate(response);\n  };\n\n  const getCountryData = async countryCode => {\n    let response = await fetchCountryData(countryCode);\n    setLoading(false);\n    setstate(response);\n  };\n\n  const getTimelineCountryData = async countryCode => {\n    let response = await fetchCountryDataTimeLine(countryCode); // formatDataToChart(response)\n\n    console.log(response);\n  };\n\n  useEffect(() => {\n    if (isEmoji(country.code)) {\n      getGlobalData();\n    } else {\n      getTimelineCountryData(country.code);\n      getCountryData(country.code);\n    }\n  }, [country]);\n  const data = {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [{\n      label: 'My First dataset',\n      backgroundColor: 'rgb(255, 99, 132)',\n      borderColor: 'rgb(255, 99, 132)',\n      data: [0, 10, 5, 2, 20, 30, 45]\n    }, {\n      label: 'My First asdf',\n      backgroundColor: '#2eb2ff',\n      borderColor: '#2eb2ff',\n      data: [0, 10, 5, 2, 12, 2, 1]\n    }]\n  };\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    setCountry: setCountry,\n    country: country,\n    setLoading: setLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(CardWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    color: '#2eb2ff',\n    type: 'Diagnosed',\n    numberCases: cases,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Card, {\n    color: '#008037',\n    type: 'Recovered',\n    numberCases: recovered,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Card, {\n    color: '#FF6384',\n    type: 'Deceased',\n    numberCases: deaths,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Card, {\n    color: '#ff914d',\n    type: 'Actives',\n    numberCases: active,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(ChartWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    width: 100,\n    height: 50,\n    data: data,\n    options: {\n      maintainAspectRatio: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/molia/projects/js/react/covid19/src/App.js"],"names":["React","Fragment","useEffect","useState","Header","Card","Select","styled","fetchGlobalData","fetchCountryData","fetchCountryDataTimeLine","isEmoji","Line","Container","div","CardWrapper","ChartWrapper","App","country","setCountry","code","label","loading","setLoading","state","setstate","active","cases","deaths","recovered","getGlobalData","response","getCountryData","countryCode","getTimelineCountryData","console","log","data","labels","datasets","backgroundColor","borderColor","maintainAspectRatio"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport Header from './components/Header.js';\nimport Card from './components/Card.js';\nimport Select from './components/Select.js';\nimport styled from '@emotion/styled';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport {fetchGlobalData, fetchCountryData, fetchCountryDataTimeLine} from './api';\nimport {isEmoji} from './helpers/helpers.js';\nimport { Line } from 'react-chartjs-2';\n\nconst Container = styled.div`\n    margin: auto;\n    width: 95%;    \n`;\n\nconst CardWrapper = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n`;\n\nconst ChartWrapper = styled.div`\n    width: 50%;\n    margin: 25px auto auto;\n`;\n\nfunction App() {\n\n    const [country, setCountry] = useState({ code: 'ðŸŒŽ', label: 'Global'  });\n    const [loading, setLoading] = useState(true);\n    const [state, setstate] = useState({\n        active: 0,\n        cases: 0,\n        deaths: 0,\n        recovered: 0\n    });\n\n    const {active, cases, deaths, recovered} = state;\n\n    const getGlobalData = async () => {\n        let response = await fetchGlobalData();\n        setLoading(false);\n        setstate(response);        \n    }\n    const getCountryData = async (countryCode) => {\n        let response = await fetchCountryData(countryCode);\n        setLoading(false);\n        setstate(response);        \n    }\n    const getTimelineCountryData = async (countryCode) => {\n        let response = await fetchCountryDataTimeLine(countryCode);\n        // formatDataToChart(response)\n        console.log(response);       \n    }\n\n    \n    useEffect(() => {\n        if (isEmoji(country.code)){\n            getGlobalData();\n        } else {\n            getTimelineCountryData(country.code);\n            getCountryData(country.code);\n        }             \n    }, [country]);\n\n    const data = {\n        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n        datasets: [{\n            label: 'My First dataset',\n            backgroundColor: 'rgb(255, 99, 132)',\n            borderColor: 'rgb(255, 99, 132)',\n            data: [0, 10, 5, 2, 20, 30, 45]\n        },\n        {\n            label: 'My First asdf',\n            backgroundColor: '#2eb2ff',\n            borderColor: '#2eb2ff',\n            data: [0, 10, 5, 2, 12, 2, 1]\n        }]\n    }\n\n    return (\n        <Fragment>\n            <Header></Header> \n            <Container>\n                <Select setCountry={setCountry} country={country} setLoading={setLoading}></Select>\n                <CardWrapper>\n                    <Card color={'#2eb2ff'} type={'Diagnosed'} numberCases={cases} loading={loading}></Card>   \n                    <Card color={'#008037'} type={'Recovered'} numberCases={recovered} loading={loading}></Card>   \n                    <Card color={'#FF6384'} type={'Deceased'} numberCases={deaths} loading={loading}></Card>   \n                    <Card color={'#ff914d'} type={'Actives'} numberCases={active} loading={loading}></Card>       \n                </CardWrapper> \n                <ChartWrapper>\n                    <Line \n                        width={100}\n                        height={50}\n                        data={data} \n                        options={{ maintainAspectRatio: true }}/>                          \n\n                </ChartWrapper>\n            </Container>\n        </Fragment>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}