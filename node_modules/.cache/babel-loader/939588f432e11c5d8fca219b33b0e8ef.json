{"ast":null,"code":"var _jsxFileName = \"/Users/molia/projects/js/react/covid19/src/App.js\";\nimport React, { Fragment, useEffect, useState } from 'react';\nimport Header from './components/Header.js';\nimport Card from './components/Card.js';\nimport Select from './components/Select.js';\nimport Footer from './components/Footer.js';\nimport styled from '@emotion/styled';\nimport { ThemeProvider } from 'emotion-theming';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport { fetchGlobalData, fetchCountryData, fetchCountryDataTimeLine, fetchGlobalDataTimeline } from './api';\nimport { isEmoji, formatDataToChart } from './helpers/helpers.js';\nimport { Line } from 'react-chartjs-2';\nconst Main = styled.div`\n    margin: auto;\n    width: 95%;    \n`;\nconst Container = styled.div`    \n    width: 100%;\n    height:100%;\n    min-height: 100vh;\n    transition: all ease 0.8s; \n    background-color: ${props => props.theme.body_color};     \n`;\nconst CardWrapper = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n`;\nconst ChartWrapper = styled.div`\n    max-width: 1500px;\n    max-height: 900px;\n    margin: auto;\n    padding: 25px;\n`;\n\nfunction App() {\n  let themeData = JSON.parse(localStorage.getItem('theme-data'));\n\n  if (!themeData) {\n    themeData = {};\n  }\n\n  const [theme, setTheme] = useState(themeData);\n  const [country, setCountry] = useState({\n    code: 'ðŸŒŽ',\n    label: 'Global'\n  });\n  const [timeLineData, setTimeLineData] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [state, setstate] = useState({\n    active: 0,\n    cases: 0,\n    deaths: 0,\n    recovered: 0\n  });\n  const {\n    active,\n    cases,\n    deaths,\n    recovered\n  } = state;\n\n  const getGlobalData = async () => {\n    let response = await fetchGlobalData();\n    setLoading(false);\n    setstate(response);\n  };\n\n  const getGlobalDataTimeLine = async () => {\n    let response = await fetchGlobalDataTimeline();\n    setLoading(false);\n    let data = formatDataToChart(response);\n    setTimeLineData(data);\n  };\n\n  const getCountryData = async countryCode => {\n    let response = await fetchCountryData(countryCode);\n    setLoading(false);\n    setstate(response);\n  };\n\n  const getTimelineCountryData = async countryCode => {\n    let response = await fetchCountryDataTimeLine(countryCode);\n    let data = formatDataToChart(response);\n    setTimeLineData(data);\n  };\n\n  useEffect(() => {\n    if (isEmoji(country.code)) {\n      getGlobalData();\n      getGlobalDataTimeLine();\n    } else {\n      getTimelineCountryData(country.code);\n      getCountryData(country.code);\n    }\n  }, [country]);\n  let options = {\n    // legend: {\n    //   display: true,\n    //   labels: {\n    //     fontColor: '#f5f5f5'\n    //   }\n    // },\n    scales: {\n      yAxes: [{\n        ticks: {\n          fontColor: \"#f5f5f5\",\n          callback: function (value, index, values) {\n            console.log(\"hola\");\n            return new Intl.NumberFormat(\"es-ES\").format(value);\n          }\n        },\n        gridLines: {\n          color: \"#f5f5f5\",\n          zeroLineColor: \"#f5f5f5\"\n        },\n        stacked: true\n      }],\n      xAxes: [{\n        ticks: {\n          fontColor: \"#f5f5f5\"\n        },\n        gridLines: {\n          color: \"#f5f5f5\"\n        }\n      }]\n    }\n  };\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    theme: theme,\n    setTheme: setTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Main, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    setCountry: setCountry,\n    country: country,\n    setLoading: setLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(CardWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    color: '#2eb2ff',\n    type: 'Diagnosed',\n    numberCases: cases,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Card, {\n    color: '#008037',\n    type: 'Recovered',\n    numberCases: recovered,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Card, {\n    color: '#FF6384',\n    type: 'Deceased',\n    numberCases: deaths,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Card, {\n    color: '#ff914d',\n    type: 'Active',\n    numberCases: active,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(ChartWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    width: 100,\n    height: 50,\n    data: timeLineData,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/molia/projects/js/react/covid19/src/App.js"],"names":["React","Fragment","useEffect","useState","Header","Card","Select","Footer","styled","ThemeProvider","fetchGlobalData","fetchCountryData","fetchCountryDataTimeLine","fetchGlobalDataTimeline","isEmoji","formatDataToChart","Line","Main","div","Container","props","theme","body_color","CardWrapper","ChartWrapper","App","themeData","JSON","parse","localStorage","getItem","setTheme","country","setCountry","code","label","timeLineData","setTimeLineData","loading","setLoading","state","setstate","active","cases","deaths","recovered","getGlobalData","response","getGlobalDataTimeLine","data","getCountryData","countryCode","getTimelineCountryData","options","scales","yAxes","ticks","fontColor","callback","value","index","values","console","log","Intl","NumberFormat","format","gridLines","color","zeroLineColor","stacked","xAxes"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport Header from './components/Header.js';\nimport Card from './components/Card.js';\nimport Select from './components/Select.js';\nimport Footer from './components/Footer.js';\nimport styled from '@emotion/styled';\nimport { ThemeProvider } from 'emotion-theming'\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport {fetchGlobalData, fetchCountryData, fetchCountryDataTimeLine, fetchGlobalDataTimeline} from './api';\nimport {isEmoji, formatDataToChart} from './helpers/helpers.js';\nimport { Line } from 'react-chartjs-2';\n\nconst Main = styled.div`\n    margin: auto;\n    width: 95%;    \n`;\nconst Container = styled.div`    \n    width: 100%;\n    height:100%;\n    min-height: 100vh;\n    transition: all ease 0.8s; \n    background-color: ${props => props.theme.body_color};     \n`;\n\nconst CardWrapper = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n`;\n\nconst ChartWrapper = styled.div`\n    max-width: 1500px;\n    max-height: 900px;\n    margin: auto;\n    padding: 25px;\n`;\n\nfunction App() {\n\n    let themeData = JSON.parse(localStorage.getItem('theme-data'));    \n    if (!themeData) {\n        themeData = {}\n    }\n\n    const [theme, setTheme] = useState(themeData);\n\n    const [country, setCountry] = useState({ code: 'ðŸŒŽ', label: 'Global'  });    \n    const [timeLineData, setTimeLineData] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [state, setstate] = useState({\n        active: 0,\n        cases: 0,\n        deaths: 0,\n        recovered: 0\n    });\n\n    const {active, cases, deaths, recovered} = state;\n\n    const getGlobalData = async () => {\n        let response = await fetchGlobalData();\n        setLoading(false);\n        setstate(response);        \n    }\n\n    const getGlobalDataTimeLine = async () => {\n        let response = await fetchGlobalDataTimeline();\n        setLoading(false);\n        let data =  formatDataToChart(response);\n        setTimeLineData(data);       \n    }\n    const getCountryData = async (countryCode) => {\n        let response = await fetchCountryData(countryCode);\n        setLoading(false);\n        setstate(response);        \n    }\n    const getTimelineCountryData = async (countryCode) => {\n        let response = await fetchCountryDataTimeLine(countryCode);          \n        let data =  formatDataToChart(response);         \n        setTimeLineData(data);            \n    }\n\n    \n    useEffect(() => {\n        if (isEmoji(country.code)){\n            getGlobalData();\n            getGlobalDataTimeLine();\n        } else {\n            getTimelineCountryData(country.code);\n            getCountryData(country.code);\n        }             \n    }, [country]);\n    \n    let options = {\n        // legend: {\n        //   display: true,\n        //   labels: {\n        //     fontColor: '#f5f5f5'\n        //   }\n        // },\n        scales: {\n            yAxes: [{\n                ticks:{     \n                    fontColor : \"#f5f5f5\",\n                    callback: function(value, index, values) {\n                        console.log(\"hola\");\n                        return new Intl.NumberFormat(\"es-ES\").format(value);\n                    }\n                },\n                gridLines:{\n                color: \"#f5f5f5\",\n                zeroLineColor :\"#f5f5f5\",\n        \n                },\n                stacked: true\n            }],\n            xAxes: [{\n                ticks:{\n                    fontColor : \"#f5f5f5\",\n                },\n                gridLines:{\n                color: \"#f5f5f5\",\n            \n                }\n            }]\n        }        \n      }\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Container>\n                <Header theme={theme} setTheme={setTheme}></Header> \n                <Main>\n                    <Select setCountry={setCountry} country={country} setLoading={setLoading}></Select>\n                    <CardWrapper>\n                        <Card color={'#2eb2ff'} type={'Diagnosed'} numberCases={cases} loading={loading}></Card>   \n                        <Card color={'#008037'} type={'Recovered'} numberCases={recovered} loading={loading}></Card>   \n                        <Card color={'#FF6384'} type={'Deceased'} numberCases={deaths} loading={loading}></Card>   \n                        <Card color={'#ff914d'} type={'Active'} numberCases={active} loading={loading}></Card>       \n                    </CardWrapper> \n                    <ChartWrapper>\n                        <Line \n                            width={100}\n                            height={50}       \n                            data={timeLineData} \n                            options={options}/>                         \n                    </ChartWrapper>\n                </Main>\n                <Footer></Footer>\n            </Container>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}